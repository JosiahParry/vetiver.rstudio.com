---
title: "Version"
format:
  html:
    toc: true
    include-after-body:
      - sync-tabs.html
---

## Review of previous steps

::: panel-tabset

## R 

```{r}
#| code-fold: true
#| code-summary: "Show the code from previous steps"
#| message: false

library(tidyverse)
library(tidymodels)
library(vetiver)
hotels <- read_csv('https://tidymodels.org/start/case-study/hotels.csv')

set.seed(123)
hotel_split <- initial_split(hotels, strata = children)
hotel_train <- training(hotel_split)
hotel_test  <- testing(hotel_split)

rf_recipe <- 
  recipe(children ~ ., data = hotel_train) %>% 
  step_date(arrival_date) %>% 
  step_holiday(arrival_date, keep_original_cols = FALSE)
rf_spec <- rand_forest(mode = "classification")

set.seed(234)
rf_fit <-
    workflow(rf_recipe, rf_spec) %>%
    fit(sample_frac(hotel_train, 0.5))

v <- vetiver_model(rf_fit, "hotel_rf")
v
```

## Python

```{python}
#| code-fold: true
#| code-summary: "Show the code from previous steps"
import pandas as pd
import numpy as np
from sklearn import model_selection, preprocessing, pipeline
from sklearn.ensemble import RandomForestClassifier
from vetiver import VetiverModel

np.random.seed(500)

raw = pd.read_csv('https://tidymodels.org/start/case-study/hotels.csv')
df = pd.DataFrame(raw)
df['arrival_date'] = pd.to_datetime(df['arrival_date'])
df['arrival_month'] = df['arrival_date'].dt.month
df['arrival_dow'] = df['arrival_date'].dt.dayofweek
df = df.drop(columns = 'arrival_date').dropna()
X, y = df.drop(columns = 'children'), df['children']
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = 0.25)

## let's only use half of the training data for now
X_1, X_2, y_1, y_2 = model_selection.train_test_split(X_train, y_train, test_size = 0.5)

le = preprocessing.OrdinalEncoder().fit(X_1)
rf = RandomForestClassifier().fit(le.transform(X_1), y_1)
rf = pipeline.Pipeline([('label_encoder', le), ('random_forest', rf)])

v = VetiverModel(rf, save_ptype = True, ptype_data = X_1, model_name = "hotel_rf")
v.description
```

:::


## Store and version your model

You can store and version your model by choosing a [pins](https://pins.rstudio.com/) "board" for it, including a local folder, RStudio Connect, Amazon S3, and more.  When we write the vetiver model to our board, the binary model object is stored on our board together with necessary metadata, like the packages needed to make a prediction and the model’s input data prototype for checking new data at prediction time.

::: callout-note
We'll use a temporary board that will be automatically deleted for this demo, but for your real work, you will want to choose the best board for your particular infrastructure.
:::

::: panel-tabset

## R 

Most pins boards have versioning turned on by default, but we can turn it on explicitly for our temporary demo board.

```{r}
#| message: false
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
```

## Python

```{python}
#| message: false
from pins import board_temp
from vetiver import vetiver_pin_write
model_board = board_temp(allow_pickle_read=True)
vetiver_pin_write(model_board, v)
```

:::

Let’s train our model again with a new version of the dataset and write it once more to our board.

::: panel-tabset

## R 

```{r}
## use a different random subset of the training data
rf <-
    workflow(rf_recipe, rf_spec) %>%
    fit(sample_frac(hotel_train, 0.5))

v <- vetiver_model(rf, "hotel_rf")

model_board %>% vetiver_pin_write(v)
```

## Python

```{python}
## use a different random subset of the training data
X_1, X_2, y_1, y_2 = model_selection.train_test_split(X_train, y_train, test_size = 0.5)

le = preprocessing.OrdinalEncoder().fit(X_1)
rf = RandomForestClassifier().fit(le.transform(X_1), y_1)
rf = pipeline.Pipeline([('label_encoder', le), ('random_forest', rf)])

v = VetiverModel(rf, save_ptype = True, ptype_data = X_1, model_name = "hotel_rf")
vetiver_pin_write(model_board, v)
```


:::


Both versions are stored, and we have access to both.

::: panel-tabset

## R 

```{r}
model_board %>% pin_versions("hotel_rf")
```

## Python

```{python}
model_board.pin_versions("hotel_rf")
```


:::

The primary purpose of pins is to make it easy to share data artifacts, so depending on the board you choose, your pinned vetiver model can be shareable with your collaborators.

