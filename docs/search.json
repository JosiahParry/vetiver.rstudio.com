[
  {
    "objectID": "python/examples.html",
    "href": "python/examples.html",
    "title": "Examples",
    "section": "",
    "text": "If you‚Äôre looking for more vetiver content, check out this repo of examples."
  },
  {
    "objectID": "python/get-started.html#installation",
    "href": "python/get-started.html#installation",
    "title": "Get started",
    "section": "Installation",
    "text": "Installation\nvetiver can be installed via pip with PyPI.\npip install vetiver\nYou can also install the development version from GitHub.\npip install git+https://github.com/isabelizimm/vetiver"
  },
  {
    "objectID": "python/get-started.html#get-started",
    "href": "python/get-started.html#get-started",
    "title": "Get started",
    "section": "Get started",
    "text": "Get started\nVetiver focuses on two main objects: VetiverModel() and VetiverAPI(). A VetiverModel collects all the information needed for deploying a trained model, while a VetiverAPI deploys the model to a REST endpoint. The example below shows a minimal deployment of an arbitrary model.\n\nfrom vetiver import mock, VetiverModel, VetiverAPI\n\nX, y = mock.get_mock_data()\nmodel = mock.get_mock_model().fit(X, y)\n\nv = VetiverModel(model, save_ptype= True, ptype_data=X)\n\nmy_api = VetiverAPI(v)\nmy_api.run()\n\n(This script is complete, it should run ‚Äúas is‚Äù)"
  },
  {
    "objectID": "python/index.html",
    "href": "python/index.html",
    "title": "Vetiver",
    "section": "",
    "text": "The goal of vetiver is to give data scientists and other model-builders the tools to deploy their model to a remote endpoint. It is the Python counterpart to the R package vetiver.\nKey features include:\n\nSimple: designed to fit into a data scientist‚Äôs natural workflow\nRobust: ability to check input data types to minimize type failures in a model\nAdvanced support: easily deploy multiple endpoints to handle pre- and post- processing\nBased on FastAPI, using OpenAPI\n\nSource code available on GitHub."
  },
  {
    "objectID": "python/vetiver-model.html",
    "href": "python/vetiver-model.html",
    "title": "VetiverModel",
    "section": "",
    "text": "This tutorial shows you how to use VetiverModel() with its core features, step by step.\nUsers will start with any trained model. Currently, Vetiver supports scikit-learn models, with other model support on its way.\n\nfrom vetiver import mock, VetiverModel, VetiverAPI\n\nX, y = mock.get_mock_data()\nmodel = mock.get_mock_model().fit(X, y)\n\nv = VetiverModel(model, save_ptype = True, ptype_data = X)\n\nThe save_ptype and ptype_data arguments refer to an input data prototype, or ptype. This ptype is an automatically created Pydantic BaseModel that stores the types of the data that the API can expect when deployed. To enable this feature, set save_ptype = True and set ptype_data equal to training data. You can turn this feature off by setting save_ptype = False and not passing in any ptype_data."
  },
  {
    "objectID": "python/vetiver-api.html#minimal-deployment",
    "href": "python/vetiver-api.html#minimal-deployment",
    "title": "VetiverAPI",
    "section": "Minimal deployment",
    "text": "Minimal deployment\nThe simplest VetiverAPI deployment includes a trained model with a predict method, inside a VetiverModel.\n\nfrom vetiver import mock, VetiverModel, VetiverAPI\n\nX, y = mock.get_mock_data()\nmodel = mock.get_mock_model().fit(X, y)\n\nv = VetiverModel(model = model, save_ptype = True, ptype_data = X)\n\nmy_api = VetiverAPI(v)\nmy_api.run()\n\n(This script is complete, it should run ‚Äúas is‚Äù)\n!!! note\nIn this example, Vetiver is invoking a data prototype, or `ptype`, which requires sample data to create. This is an optional configuration, but it creates more verbose documentation within the API, as well as allows for some basic type-checking within the API itself. To turn this off, set `save_ptype = False`.\nIn the output, there will be a line with something similar to:\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nFollow the link to the API at http://127.0.0.1:8000. You will be redirected to the automatic API documentation provided by Rapidoc. From there, you can send requests to your model, see example curl commands, and interact with your API."
  },
  {
    "objectID": "python/vetiver-api.html#multiple-endpoints",
    "href": "python/vetiver-api.html#multiple-endpoints",
    "title": "VetiverAPI",
    "section": "Multiple endpoints",
    "text": "Multiple endpoints\nMore advanced use cases may require multiple endpoints to be created for pre-processing or post-processing data. You can use vetiver_post() to create a new POST endpoint that implements a custom function. In the example below, the endpoint ‚Äúnew_endpoint‚Äù sums all the input data.\n!!! note\nThe method `vetiver_post()` currently handles all data as a [Series](https://pandas.pydata.org/docs/reference/api/pandas.Series.html) type.\n\nfrom vetiver import mock, VetiverModel, VetiverAPI\n\nX, y = mock.get_mock_data()\nmodel = mock.get_mock_model().fit(X, y)\n\nv = VetiverModel(model = model, save_ptype = True, ptype_data = X)\n\nmy_api = VetiverAPI(v)\n\n# new endpoint\ndef sum_numbers(x):\n    return x.sum()\n\nmy_api.vetiver_post(endpoint_fx = sum_numbers, endpoint_name = \"new_endpoint\")\n\nmy_api.run()\n\n(This script is complete, it should run ‚Äúas is‚Äù)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLOps with vetiver",
    "section": "",
    "text": "The vetiver framework is for MLOps tasks in Python and R.\n\nVetiver, the oil of tranquility, is used as a stabilizing ingredient in perfumery to preserve more volatile fragrances.\n\nThe goal of vetiver is to provide fluent tooling to version, share, deploy, and monitor a trained model. Functions handle both recording and checking the model‚Äôs input data prototype, and predicting from a remote API endpoint.\n\n\n\n\n\n\n\n\n\n\n\nData scientists have effective tools that they ‚ù§Ô∏è to:\n\n\n\n\ncollect data\nprepare, manipulate, refine data\ntrain models\n\n\n\n\n\n\n\n\n\nThere is a lack üò© of effective tools to:\n\n\n\n\nput models into production\nmonitor model performance\ntrigger retraining\n\n\n\nYou can use vetiver for deploying and handling your trained models.\n\nRPython\n\n\n\nlibrary(vetiver)\ncars_lm <- lm(mpg ~ ., data = mtcars)\nvetiver_model(cars_lm, \"cars_linear\")\n\n\n‚îÄ‚îÄ cars_linear ‚îÄ <butchered_lm> model for deployment \nAn OLS linear regression model using 10 features\n\n\n\n\n\n1 + 1\n\n2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2022 RStudio\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "about.html#what-are-different-ways-you-can-contribute",
    "href": "about.html#what-are-different-ways-you-can-contribute",
    "title": "About vetiver",
    "section": "What are different ways you can contribute?",
    "text": "What are different ways you can contribute?\n\nAnswer questions\nYou can help others use and learn vetiver by answering questions on the RStudio community site, Stack Overflow, and Twitter. Many people asking for help with vetiver don‚Äôt know what a reproducible example or ‚Äúreprex‚Äù is, or how to craft one. Acknowledging an individual‚Äôs problem, showing them how to build a reprex, and pointing them to helpful resources are all enormously beneficial, even if you don‚Äôt immediately solve their problem.\nRemember that while you might have seen a problem a hundred times before, it‚Äôs new to the person asking it. Be patient, polite, and empathetic.\n\n\nFile issues\nIf you‚Äôve found a bug, first create a minimal reproducible example. Spend some time working to make it as minimal as possible; the more time you spend doing this, the easier it is to fix the bug. When your reprex is ready, file it on the GitHub repo of the appropriate package, either Python or R.\nThe vetiver team often focuses on one package at a time to reduce context switching and be more efficient. We may not address each issue right away, but we will use the reproducible example you create to understand your problem when it is time to focus on that package."
  },
  {
    "objectID": "about.html#contribute-documentation",
    "href": "about.html#contribute-documentation",
    "title": "About vetiver",
    "section": "Contribute documentation",
    "text": "Contribute documentation\nDocumentation is a high priority for vetiver, and pull requests to correct or improve documentation are welcome."
  },
  {
    "objectID": "about.html#contribute-code",
    "href": "about.html#contribute-code",
    "title": "About vetiver",
    "section": "Contribute code",
    "text": "Contribute code\nIf you are a more experienced R or Python programmer, you may have the inclination, interest, and ability to contribute directly to package development. Before you submit a pull request to vetiver, always file an issue and confirm the vetiver team agrees with your idea and is happy with your basic proposal.\nWe use the tidyverse style guide for R and the ??? style guide for Python. Using a style guide keeps your new code and documentation matching the existing style, and makes the review process much smoother."
  }
]